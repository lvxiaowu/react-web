(self["webpackChunk_sd_react_web"]=self["webpackChunk_sd_react_web"]||[]).push([[275],{22231:function(n,e,t){"use strict";t.d(e,{m:function(){return s.m}});var s=t(9684);t(72255)},61130:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return L}});var s=t(13378),r=t(67294),a=JSON.parse('{"menus":{"en-US":{"/doc":[{"path":"/doc/avatar","title":"Avatar \u5934\u50cf","meta":{}},{"path":"/doc/mask","title":"Mask \u906e\u7f69\u5c42","meta":{}},{"path":"/doc/progress","title":"Progress \u8fdb\u5ea6\u6761","meta":{}},{"path":"/doc/toast","title":"Toast \u8f7b\u63d0\u793a","meta":{}}],"/getting-started":[{"path":"/getting-started","title":"\u5feb\u901f\u4e0a\u624b","meta":{}}],"/help":[{"path":"/help","title":"\u5e2e\u52a9","meta":{}}],"*":[{"path":"/","title":"react-web","meta":{}}]}},"locales":[{"name":"en-US","label":"English"}],"navs":{"en-US":[{"title":"\u5feb\u901f\u4e0a\u624b","order":1,"path":"/getting-started"},{"title":"\u7ec4\u4ef6","order":2,"path":"/doc"},{"title":"\u5e2e\u52a9","path":"/help"}]},"title":"React Web","mode":"site","repository":{"url":"https://github.com/lvxiaowu/react-web","branch":"master"},"theme":{},"exportStatic":{}}'),i=t(68699),o=t(94043),l=t.n(o),c=t(10664),d='import React from \'react\';\nimport Avatar from \'../\';\nimport \'../style\';\nimport \'./index.less\';\n\nexport default () => (\n  <>\n    <div className="rows">\n      <Avatar size="xl">xl</Avatar>\n      <Avatar size="lg">lg</Avatar>\n      <Avatar>md</Avatar>\n      <Avatar size="sm">sm</Avatar>\n      <Avatar size="xs">xs</Avatar>\n    </div>\n    <div className="rows">\n      <Avatar shape="square" size="xl">\n        xl\n      </Avatar>\n      <Avatar shape="square" size="lg">\n        lg\n      </Avatar>\n      <Avatar shape="square">md</Avatar>\n      <Avatar shape="square" size="sm">\n        sm\n      </Avatar>\n      <Avatar shape="square" size="xs">\n        xs\n      </Avatar>\n    </div>\n  </>\n);',p="import React, { Component, CSSProperties } from 'react';\nimport classnames from 'classnames';\nimport { AvatarProps } from './PropsType';\n\nexport interface AvatarStates {\n  childrenScale: number;\n}\n\nclass Avatar extends Component<AvatarProps, AvatarStates> {\n  static defaultProps: AvatarProps = {\n    prefixCls: 'sd-avatar',\n    shape: 'circle',\n    size: 'md',\n  };\n\n  private avatarChildrenNode: HTMLElement | undefined;\n\n  private avatarWrapperNode: HTMLElement;\n\n  state: AvatarStates = {\n    childrenScale: 1,\n  };\n\n  componentDidMount() {\n    this.setChildrenScale();\n  }\n\n  componentDidUpdate(prevProps: AvatarProps) {\n    if (this.props !== prevProps) {\n      this.setChildrenScale();\n    }\n  }\n\n  setChildrenScale = () => {\n    if (!this.avatarChildrenNode || !this.avatarWrapperNode) {\n      return;\n    }\n    const avatarChildrenWidth = this.avatarChildrenNode.offsetWidth;\n    const avatarWrapperWidth = this.avatarWrapperNode.offsetWidth;\n    if (!avatarChildrenWidth || !avatarWrapperWidth) {\n      return;\n    }\n    const childrenScale = (avatarWrapperWidth - 8) / avatarChildrenWidth;\n    this.setState({\n      childrenScale: childrenScale < 1 ? childrenScale : 1,\n    });\n  };\n  render() {\n    const { prefixCls, style, size, shape, src, alt, children, className, ...others } = this.props;\n    const { childrenScale } = this.state;\n\n    const hasFontSizeStyle = style && style.fontSize;\n    const hasImage = src && src.trim() !== '';\n    const hasString = typeof children === 'string';\n\n    const cls = classnames(prefixCls, className, `${prefixCls}--${shape}`, {\n      [`${prefixCls}--${size}`]: !!size,\n    });\n\n    const clsImage = classnames({ [`${prefixCls}--image`]: hasImage });\n    const clsString = classnames({ [`${prefixCls}--string`]: hasString || hasImage });\n    const childrenTransformStr = `scale(${childrenScale}) translateX(-50%)`;\n    const spanStyle: CSSProperties = hasFontSizeStyle\n      ? {}\n      : {\n          transform: childrenTransformStr,\n          WebkitTransform: childrenTransformStr,\n          msTransform: childrenTransformStr,\n        };\n    return (\n      <span\n        style={style}\n        className={cls}\n        {...others}\n        ref={(node: HTMLElement) => {\n          this.avatarWrapperNode = node;\n        }}\n      >\n        {hasImage && <img src={src} alt={alt} className={clsImage} />}\n        {!hasImage && hasString && (\n          <span\n            className={clsString}\n            style={spanStyle}\n            ref={(node: HTMLElement) => {\n              this.avatarChildrenNode = node;\n            }}\n          >\n            {children}\n          </span>\n        )}\n      </span>\n    );\n  }\n}\n\nexport default Avatar;",m="import '../../style';\nimport './index.less';",h="import 'normalize.css';\nimport './index.less';",v="@import 'mixins';\n\n.sd-avatar {\n  font-family: 'Chinese Quote', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC',\n    'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif,\n    'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n  font-variant: tabular-nums;\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: inline-block;\n  text-align: center;\n  background: var(--avatar-default-bg-color);\n  color: var(--avatar-default-color);\n  white-space: nowrap;\n  position: relative;\n  overflow: hidden;\n  vertical-align: middle;\n  border-radius: var(--avatar-border-radius);\n  font-size: var(--avatar-font-size);\n  > img {\n    width: 100%;\n    height: 100%;\n    display: block;\n  }\n  &--md {\n    .avatar-size(var(--avatar-width-md), var(--avatar-height-md), var(--avatar-font-size-icon-md));\n  }\n  &--xl {\n    .avatar-size(var(--avatar-width-xl), var(--avatar-height-xl), var(--avatar-font-size-icon-xl));\n  }\n  &--lg {\n    .avatar-size(var(--avatar-width-lg), var(--avatar-height-lg), var(--avatar-font-size-icon-lg));\n  }\n  &--sm {\n    .avatar-size(var(--avatar-width-sm), var(--avatar-height-sm), var(--avatar-font-size-icon-sm));\n  }\n  &--xs {\n    .avatar-size(var(--avatar-width-xs), var(--avatar-height-xs), var(--avatar-font-size-icon-xs));\n  }\n\n  /* Avatar shape */\n  &--square {\n    border-radius: var(--radius-md);\n  }\n\n  /* Avatar image */\n  &--image {\n    background: transparent;\n  }\n\n  /* Avatar string */\n  &--string {\n    position: absolute;\n    left: 50%;\n    transform-origin: 0 center;\n    transform: translateX(-50%);\n  }\n}",u=".rows {\n  margin-bottom: 12px;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  &-dark {\n    background: #bec8c8;\n    padding: 12px;\n  }\n}\n\n.sd-avatar {\n  margin-right: 16px;\n}",g="import React from 'react';\nimport Avatar from '..';\nimport '../style';\nimport './index.less';\n\nexport default () => (\n  <>\n    <div className=\"rows\">\n      <Avatar\n        src={'https://static-venus.shandiantech.com/skio/20211227/1640572420325_state.png'}\n        alt=\"avatar\"\n      ></Avatar>\n      <Avatar style={{ color: 'red', backgroundColor: 'rgb(249, 232, 8)' }}>User</Avatar>\n      <Avatar style={{ fontSize: 24 }}>U</Avatar>\n    </div>\n  </>\n);",f="import React from 'react';\nimport Avatar from '..';\nimport '../style';\nimport './index.less';\n\nconst textList = ['Zhong', 'An', 'Component', 'Library', 'Zarm-Web'];\nconst colorList = ['#48f57b', '#a6e62f', '#ffbf00', '#38ae83', '#34cd83'];\n\nclass Demo extends React.Component {\n  state = {\n    showIndex: 0,\n  };\n\n  textListLastIndex = textList.length - 1;\n\n  onChangeTextPlay = () => {\n    const { showIndex } = this.state;\n    const { textListLastIndex } = this;\n    this.setState({\n      showIndex: showIndex < textListLastIndex ? showIndex + 1 : 0,\n    });\n  };\n\n  render() {\n    const { showIndex } = this.state;\n\n    return (\n      <>\n        <Avatar size={'lg'} style={{ backgroundColor: `${colorList[showIndex]}` }}>\n          {textList[showIndex]}\n        </Avatar>\n        <button onClick={this.onChangeTextPlay} style={{ marginLeft: 15 }}>\n          Change\n        </button>\n      </>\n    );\n  }\n}\n\nexport default Demo;",x="import React from 'react';\nimport Mask from '../';\nimport '../style';\nimport './index.less';\n\nclass Demo extends React.Component {\n  state = {\n    visible: false,\n  };\n  onChange = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n  render(): React.ReactNode {\n    return (\n      <div>\n        <Mask visible={this.state.visible} type=\"normal\" />\n        <button onClick={this.onChange}>\u5207\u6362</button>\n      </div>\n    );\n  }\n}\n\nexport default Demo;",y="import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { MaskProps } from './PropsType';\n\nexport interface MaskStates {}\n\nclass Mask extends Component<MaskProps, MaskStates> {\n  static defaultProps: MaskProps = {\n    prefixCls: 'sd-mask',\n    visible: false,\n    type: 'normal',\n  };\n  render() {\n    const { prefixCls, className, visible, type, ...others } = this.props;\n    const markCls = classnames(prefixCls, className, {\n      [`${prefixCls}--${type}`]: !!type,\n    });\n    return visible && <div className={markCls} {...others} />;\n  }\n}\n\nexport default Mask;",k="import '../../style';\nimport './index.less';",b=".sd-mask {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, var(--opacity-mask));\n  z-index: var(--zindex-mask);\n  &--transparent {\n    background-color: transparent;\n  }\n}",S=".rows {\n  margin-bottom: 12px;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  &-dark {\n    background: #bec8c8;\n    padding: 12px;\n  }\n}",z="import React from 'react';\nimport Progress from '../';\nimport '../style';\nimport './index.less';\n\nclass ProgressDemo extends React.Component {\n  render(): React.ReactNode {\n    return (\n      <div className=\"rows\">\n        <Progress percent={30} />\n      </div>\n    );\n  }\n}\n\nexport default ProgressDemo;",w="import React, { Component, CSSProperties } from 'react';\nimport classnames from 'classnames';\nimport { ProgressProps, KnownSize } from './PropsType';\n\nexport interface ProgressStates {\n  svgStrokeWidth: number;\n}\n\ntype WeightMap = {\n  [weight in KnownSize]: number;\n};\n\nclass Progress extends Component<ProgressProps, ProgressStates> {\n  static defaultProps: ProgressProps = {\n    prefixCls: 'sd-progress',\n    theme: 'primary',\n    shape: 'line',\n    size: 'md',\n    percent: 0,\n    strokeShape: 'round',\n    text: percent => `${percent}%`,\n  };\n\n  // \u7ebf\u6761\u7c97\u7ec6\u8868\n  static strokeWeights: WeightMap = {\n    lg: 10,\n    md: 8,\n    sm: 4,\n  };\n\n  private progressElement: HTMLElement | null;\n\n  state: ProgressStates = {\n    svgStrokeWidth: this.strokeWidth,\n  };\n\n  //   constructor(props) {\n  //     super(props);\n  //     this.state = {\n  //       svgStrokeWidth: this.strokeWidth,\n  //     };\n  //   }\n\n  componentDidMount() {\n    if (this.useSVG) {\n      this.resetSVGStrokeWidth();\n    }\n  }\n\n  componentDidUpdate(prevProps: ProgressProps) {\n    const { props } = this;\n    if (prevProps.strokeWidth !== props.strokeWidth) {\n      this.resetSVGStrokeWidth();\n    }\n  }\n\n  get useSVG() {\n    const { props } = this;\n    return props.shape === 'semi-circle' || props.shape === 'circle';\n  }\n\n  get strokeWidth() {\n    const { strokeWidth, size } = this.props;\n    const { strokeWeights } = Progress;\n    //  let backup = strokeWeights[size && size in strokeWeights ? size : 'md'];\n    let backup = strokeWeights['md'];\n    if (size && size in strokeWeights) {\n      backup = (strokeWeights as any)[size];\n    }\n    return Math.max(1, strokeWidth || backup);\n  }\n\n  resetSVGStrokeWidth() {\n    const baseWidth = 32;\n    if (!this.progressElement) {\n      return;\n    }\n    const { clientWidth } = this.progressElement;\n\n    this.setState({\n      svgStrokeWidth: (baseWidth / clientWidth) * this.strokeWidth,\n    });\n  }\n\n  render() {\n    const {\n      theme,\n      percent,\n      strokeShape,\n      shape,\n      size,\n      style,\n      prefixCls,\n      className,\n      children,\n      text: format,\n    } = this.props;\n    const { state } = this;\n    const strokeWidth = this.useSVG ? state.svgStrokeWidth : this.strokeWidth;\n    const hasKnownSize = size && size in Progress.strokeWeights;\n\n    const cls = classnames(prefixCls, className, {\n      [`${prefixCls}--${shape}`]: !!shape,\n      [`${prefixCls}--${theme}`]: !!theme,\n      [`${prefixCls}--${size}`]: hasKnownSize,\n    });\n\n    const sizeStyle: CSSProperties = {};\n    if (!hasKnownSize) {\n      sizeStyle.width = size;\n      if (shape === 'circle') {\n        sizeStyle.height = size;\n      }\n      if (shape === 'semi-circle') {\n        if (typeof size === 'number') {\n          sizeStyle.height = `${size / 2}px`;\n        } else if (typeof size === 'string') {\n          sizeStyle.height = size.replace(/^(\\d+)(.+)$/, (...$) => parseFloat($[1]) / 2 + $[2]);\n        }\n      }\n    }\n\n    const diameter = 32;\n    const radius = diameter / 2;\n    const extendRadius = radius + strokeWidth / 2;\n    const strokeLinecap = strokeShape === 'round' ? 'round' : 'butt';\n\n    const viewBox =\n      shape === 'circle'\n        ? `0 0 ${diameter + strokeWidth} ${diameter + strokeWidth}`\n        : `0 0 ${diameter + strokeWidth} ${(diameter + strokeWidth) / 2}`;\n\n    const path =\n      shape === 'circle'\n        ? `\n         M${extendRadius}, ${extendRadius}\n         m0 ${-radius}\n         a${radius} ${radius} 0 1 1 0 ${diameter}\n         a${radius} ${radius} 0 1 1 0 ${-diameter}`\n        : `\n         M${extendRadius}, ${extendRadius}\n         m${-radius} 0\n         a${radius} ${radius} 0 0 1 ${diameter} 0`;\n\n    const dasharray = shape === 'circle' ? Math.PI * diameter : (Math.PI * diameter) / 2;\n\n    const borderRadius = strokeShape === 'round' ? `${this.strokeWidth}px` : '0';\n    const lineTrackStyle = { height: `${strokeWidth}`, borderRadius };\n    const lineThumbStyle = { width: `${percent}%`, height: `${strokeWidth}px`, borderRadius };\n    const formattedPercent = format ? format(percent || 0) : null;\n    const hasIndicator = children || formattedPercent;\n\n    const roundInner = (shape === 'circle' || shape === 'semi-circle') && (\n      <>\n        <svg viewBox={viewBox}>\n          <path\n            className={`${prefixCls}__track`}\n            d={path}\n            strokeWidth={strokeWidth}\n            strokeLinecap={strokeLinecap}\n          />\n          <path\n            className={`${prefixCls}__thumb`}\n            d={path}\n            strokeWidth={strokeWidth}\n            strokeLinecap={strokeLinecap}\n            strokeDasharray={dasharray}\n            strokeDashoffset={(dasharray * (100 - percent!)) / 100}\n          />\n        </svg>\n        {hasIndicator && <div className={`${prefixCls}__text`}>{children || formattedPercent}</div>}\n      </>\n    );\n\n    const rectInner = shape === 'line' && (\n      <div className={`${prefixCls}__outer`}>\n        <div className={`${prefixCls}__track`} style={lineTrackStyle}>\n          <div className={`${prefixCls}__thumb`} style={lineThumbStyle} />\n        </div>\n        {hasIndicator && <div className={`${prefixCls}__text`}>{children || formattedPercent}</div>}\n      </div>\n    );\n\n    return (\n      <div\n        className={cls}\n        style={{ ...sizeStyle, ...style }}\n        ref={ele => {\n          this.progressElement = ele;\n        }}\n      >\n        {shape === 'line' ? rectInner : roundInner}\n      </div>\n    );\n  }\n}\n\nexport default Progress;",C="import '../../style';\nimport './index.less';",W="@import 'mixins';\n\n.sd-progress {\n  display: inline-block;\n  position: relative;\n\n  &__outer {\n    display: flex;\n    align-items: center;\n  }\n\n  &__text {\n    display: inline-block;\n    margin-left: r(5);\n    font-size: r(14);\n  }\n\n  &--line {\n    .progress-theme('background-color');\n  }\n  &--lg {\n    width: var(--progress-width-lg);\n  }\n\n  &--md {\n    width: var(--progress-width-md);\n  }\n\n  &--sm {\n    width: var(--progress-width-sm);\n  }\n  &__track {\n    width: 100%;\n    height: 100%;\n    background: var(--progress-background);\n    overflow: hidden;\n  }\n\n  &__thumb {\n    height: 100%;\n    width: 0;\n    transition: width 0.6s ease, background-color 0.6s ease;\n  }\n\n  &--circle {\n    display: inline-block;\n    .progress-type();\n    .progress-theme('stroke');\n\n    svg {\n      width: 100%;\n      height: 100%;\n    }\n\n    &__text {\n      display: block;\n      position: absolute;\n      top: 50%;\n      left: 0;\n      width: 100%;\n      margin: 0;\n      text-align: center;\n      line-height: 1;\n      transform: translateY(-50%);\n    }\n\n    &--lg {\n      width: var(--progress-size-lg);\n      height: var(--progress-size-lg);\n\n      &__text {\n        font-size: var(--progress-font-size-circle-lg);\n      }\n    }\n\n    &--md {\n      width: var(--progress-size-md);\n      height: var(--progress-size-md);\n\n      &__text {\n        font-size: var(--progress-font-size-circle-md);\n      }\n    }\n\n    &--sm {\n      width: var(--progress-size-sm);\n      height: var(--progress-size-sm);\n\n      &__text {\n        font-size: var(--progress-font-size-circle-sm);\n      }\n    }\n  }\n\n  &--semi-circle {\n    display: inline-block;\n    .progress-type();\n    .progress-theme('stroke');\n\n    svg {\n      width: 100%;\n      height: 100%;\n    }\n\n    &__text {\n      display: block;\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      margin: 0;\n      text-align: center;\n      line-height: 1;\n    }\n\n    &--lg {\n      width: var(--progress-size-lg);\n      height: calc(var(--progress-size-lg) / 2);\n\n      &__text {\n        font-size: var(--progress-font-size-circle-lg);\n      }\n    }\n\n    &--md {\n      width: var(--progress-size-md);\n      height: calc(var(--progress-size-md) / 2);\n\n      &__text {\n        font-size: var(--progress-font-size-circle-md);\n      }\n    }\n\n    &--sm {\n      width: var(--progress-size-sm);\n      height: calc(var(--progress-size-sm) / 2);\n\n      &__text {\n        font-size: var(--progress-font-size-circle-sm);\n      }\n    }\n  }\n}",P=".rows {\n  margin-bottom: 12px;\n  width: 100%;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n}",$="import React from 'react';\nimport Toast from '../';\nimport '../style';\nimport './index.less'\n\nexport default () => (\n<Toast />\n);",_="import React, { Component } from 'react';\nimport { ToastProps } from './PropsType';\n\n\nexport interface ToastStates {}\n\nclass Toast extends Component< ToastProps, ToastStates> {\n   render() {\n      return <>Toast \u7ec4\u4ef6</>;\n   }\n}\n  \nexport default Toast;",A="import './index.less';",N="",T=".rows {\n  margin-bottom: 12px;\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n\n  &-dark {\n    background: #bec8c8;\n    padding: 12px;\n  }\n}",I={"avatar-basic":{component:(0,c.dynamic)({loader:function(){var n=(0,i.Z)(l().mark((function n(){return l().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.next=2,t.e(50).then(t.bind(t,91335));case 2:return n.abrupt("return",n.sent.default);case 3:case"end":return n.stop()}}),n)})));function e(){return n.apply(this,arguments)}return e}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:d},"index.tsx":{import:"../",content:p},"style/index.ts":{import:"../style",content:m},"style/index.tsx":{import:"../../style",content:h},"style/index.less":{import:"./index.less",content:v},"index.less":{import:"./index.less",content:u}},dependencies:{react:{version:"16.14.0"},classnames:{version:"2.3.1"},"normalize.css":{version:"8.0.1"}},identifier:"avatar-basic"}},"avatar-type":{component:(0,c.dynamic)({loader:function(){var n=(0,i.Z)(l().mark((function n(){return l().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.next=2,t.e(50).then(t.bind(t,36355));case 2:return n.abrupt("return",n.sent.default);case 3:case"end":return n.stop()}}),n)})));function e(){return n.apply(this,arguments)}return e}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:g},"index.tsx":{import:"../",content:p},"style/index.ts":{import:"../style",content:m},"style/index.tsx":{import:"../../style",content:h},"style/index.less":{import:"./index.less",content:v},"index.less":{import:"./index.less",content:u}},dependencies:{react:{version:"16.14.0"},classnames:{version:"2.3.1"},"normalize.css":{version:"8.0.1"}},identifier:"avatar-type"}},"avatar-auto":{component:(0,c.dynamic)({loader:function(){var n=(0,i.Z)(l().mark((function n(){return l().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.next=2,t.e(50).then(t.bind(t,58659));case 2:return n.abrupt("return",n.sent.default);case 3:case"end":return n.stop()}}),n)})));function e(){return n.apply(this,arguments)}return e}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:f},"index.tsx":{import:"../",content:p},"style/index.ts":{import:"../style",content:m},"style/index.tsx":{import:"../../style",content:h},"style/index.less":{import:"./index.less",content:v},"index.less":{import:"./index.less",content:u}},dependencies:{react:{version:"16.14.0"},classnames:{version:"2.3.1"},"normalize.css":{version:"8.0.1"}},identifier:"avatar-auto"}},"mask-basic":{component:(0,c.dynamic)({loader:function(){var n=(0,i.Z)(l().mark((function n(){return l().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.next=2,t.e(50).then(t.bind(t,55179));case 2:return n.abrupt("return",n.sent.default);case 3:case"end":return n.stop()}}),n)})));function e(){return n.apply(this,arguments)}return e}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:x},"index.tsx":{import:"../",content:y},"style/index.ts":{import:"../style",content:k},"style/index.tsx":{import:"../../style",content:h},"style/index.less":{import:"./index.less",content:b},"index.less":{import:"./index.less",content:S}},dependencies:{react:{version:"16.14.0"},classnames:{version:"2.3.1"},"normalize.css":{version:"8.0.1"}},identifier:"mask-basic"}},"progress-basic":{component:(0,c.dynamic)({loader:function(){var n=(0,i.Z)(l().mark((function n(){return l().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.next=2,t.e(50).then(t.bind(t,2103));case 2:return n.abrupt("return",n.sent.default);case 3:case"end":return n.stop()}}),n)})));function e(){return n.apply(this,arguments)}return e}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:z},"index.tsx":{import:"../",content:w},"style/index.ts":{import:"../style",content:C},"style/index.tsx":{import:"../../style",content:h},"style/index.less":{import:"./index.less",content:W},"index.less":{import:"./index.less",content:P}},dependencies:{react:{version:"16.14.0"},classnames:{version:"2.3.1"},"normalize.css":{version:"8.0.1"}},identifier:"progress-basic"}},"toast-basic":{component:(0,c.dynamic)({loader:function(){var n=(0,i.Z)(l().mark((function n(){return l().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.next=2,t.e(50).then(t.bind(t,27489));case 2:return n.abrupt("return",n.sent.default);case 3:case"end":return n.stop()}}),n)})));function e(){return n.apply(this,arguments)}return e}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:$},"index.tsx":{import:"../",content:_},"style/index.ts":{import:"../style",content:A},"style/index.less":{import:"./index.less",content:N},"index.less":{import:"./index.less",content:T}},dependencies:{react:{version:"16.14.0"}},identifier:"toast-basic"}}},M=JSON.parse('{"avatar":{"default":[{"identifier":"prefixCls","description":"class\u524d\u7f00","type":"string","default":"sd-avatar"},{"identifier":"shape","description":"\u5934\u50cf\u7684\u5f62\u72b6\uff0c\u53ef\u9009\u503c\u4e3a `circle` \u3001`square`","type":"\\"circle\\" | \\"square\\"","default":"circle"},{"identifier":"size","description":"\u5934\u50cf\u7684\u5927\u5c0f, \u53ef\u9009\u503c\u4e3a `xl`\u3001`lg`\u3001`md`\u3001`sm`\u3001`xs`","type":"\\"lg\\" | \\"sm\\" | \\"md\\" | \\"xl\\" | \\"xs\\"","default":"md"},{"identifier":"src","description":"\u56fe\u7247\u5934\u50cf\u7684\u56fe\u7247\u5730\u5740","type":"string"},{"identifier":"alt","description":"\u63cf\u8ff0\u56fe\u7247\u7684\u5907\u7528\u6587\u5b57","type":"string"},{"identifier":"className","type":"string"},{"identifier":"style","type":"CSSProperties"}]},"mask":{"default":[]},"progress":{"default":[]},"toast":{"default":[]}}'),R=t(49215),L=n=>r.createElement(R.Z,(0,s.Z)({},n,{config:a,demos:I,apis:M}))}}]);